CREATE TABLE supplier2 (
supplier_id number(10) NOT NULL,
supplier_name VARCHAR(50) NOT NULL,
contact_name VARCHAR(250),
CONSTRAINT supplier2_pk PRIMARY KEY(supplier_id,supplier_name)
);

CREATE TABLE customer (
customer_id INT,
customer_name VARCHAR2(20),
age INT,
address VARCHAR2(25),
salary NUMBER(10,2) DEFAULT 5000,
CONSTRAINT customer_pk PRIMARY KEY(customer_id)
);

CREATE TABLE employee(
id NUMBER(5) NOT NULL PRIMARY KEY,
emp_name VARCHAR(20) NOT NULL,
address VARCHAR(30),
age INT,
salary NUMBER(10,2),
contact VARCHAR(10),
CONSTRAINT age_chk CHECK(age > 18) 
);

CREATE TABLE department(
id INT NOT NULL PRIMARY KEY,
dept_name VARCHAR(20) );

CREATE TABLE employee1(
employee_number NUMBER(10) NOT NULL PRIMARY KEY,
employee_name VARCHAR(50) NOT NULL,
department_id NUMBER(10),
salary NUMBER(8),
CONSTRAINT fk_department 
FOREIGN KEY (department_id)
REFERENCES department(id) );



CREATE TABLE faculty (
faculty_id INT NOT NULL PRIMARY KEY,
faculty_name VARCHAR(20) NOT NULL,
designation VARCHAR(20) );


CREATE TABLE student(
stu_id INT NOT NULL PRIMARY KEY,
stu_name VARCHAR(20) NOT NULL,
faculty_id INT,
CONSTRAINT fk_faculty
FOREIGN KEY(faculty_id)
REFERENCES faculty(faculty_id));

INSERT ALL
INTO customer VALUES(106,'Nikol Jokic', 28, 'Serbia', 5000)
INTO customer VALUES(107, 'Giannis', 24, 'Greek', 4500)
SELECT * FROM dual;

INSERT INTO employee VALUES(null, 'Mangesh Chalke', 'Mumbai', 24, 3000, 'gmail.com');

ALTER TABLE customer ADD email VARCHAR(25);

ALTER TABLE customer ADD city VARCHAR2(40) DEFAULT 'Seattle';

ALTER TABLE customer ADD (
hobbies VARCHAR(20) ,
movie VARCHAR(14) );

ALTER TABLE customer
MODIFY city VARCHAR(15);

ALTER TABLE customer
MODIFY city VARCHAR(15) DEFAULT 'Seattle' NOT NULL;

ALTER TABLE customer
MODIFY (
customer_name VARCHAR(100) NOT NULL,
city VARCHAR(75) DEFAULT 'Seattle' NOT NULL);

OR and AND orperator

16.12.22

SELECT column1, column2, columnN
FROM table_name
WHERE [condition1] and [condition2].... AND [conditionN];
          
SELECT * FROM supplier;

INSERT ALL 
INTO supplier VALUES(101, 'Maharashtra', '12345')
INTO supplier VALUES(102, 'Delhi', '12324')
INTO supplier VALUES(103, 'Goa', '21345')
SELECT * FROM dual;

SELECT * 
FROM supplier
WHERE (supplier_name = 'Maharashtra' AND supplier_id = 101) OR (supplier_id < 100);

Comparison Operator.

= Equal
<> Not Equal
!= Not Equal
> Greater Than
>= Greater Than Equal
< Less Than
<= Less than equal
IN() Matches a value in a list.
NOT Negates a condition
Between Within a range (inclusive)
IS NULL Null value
IS NOT NULL non null value
LIKE Pattern matching with % and _
REGEXP_LIKE Pattern matching with regular expressions
EXISTS Condition is met if subquery return at least one row.

SELECT * FROM customer1;

SELECT * 
FROM customer1
WHERE customer_name = 'Manu';

SELECT * 
FROM customer1
WHERE customer_name != 'Manu';

SELECT * 
FROM customer1
WHERE customer_name <> 'Manu';


SELECT * 
FROM customer1
WHERE salary > 5000;

SELECT * 
FROM customer1
WHERE salary >= 5000;

SELECT * 
FROM customer1
WHERE salary < 5000;

SELECT * 
FROM customer1
WHERE salary <= 5000;

SELECT *
FROM customer1
WHERE salary BETWEEN 4080 AND 5000;

SELECT * 
FROM customer1
WHERE salary NOT BETWEEN 4080 AND 5000;

INSERT INTO customer1 VALUES(108,'Manu', 24, 'Argentina', 4500,  'manu@gmail.com', 'San Antonio', 'Basketball');

SELECT DISTINCT customer_name
FROM customer1
WHERE customer_id = 101;

SELECT customer_name 
From customer1;

CREATE TABLE hospital(
department_id INT NOT NULL PRIMARY KEY,
name VARCHAR2(20),
location VARCHAR2(25),
head_dr INT,
CONSTRAINT fk_doctor
FOREIGN KEY (head_dr)
REFERENCES doctor(doc_id)
);

CREATE TABLE doctor(
doc_id INT NOT NULL PRIMARY KEY,
fname VARCHAR2(10),
lname VARCHAR2(10),
special VARCHAR2(15),
salary NUMBER(10,2),
address VARCHAR2(20),
phone INT
);

CREATE TABLE patient(
p_id INT NOT NULL PRIMARY KEY,
p_name VARCHAR2(15),
p_age NUMBER(2),
p_address VARCHAR2(25),
p_phone INT
);

CREATE TABLE consult(
p_id INT NOT NULL,
doc_id INT NOT NULL,
department_id INT NOT NULL,
disease VARCHAR2(10),
status VARCHAR2(10),
CONSTRAINT fk_person
FOREIGN KEY(p_id)	
REFERENCES patient(p_id),
CONSTRAINT fk_doctor_second
FOREIGN KEY(doc_id)
REFERENCES doctor(doc_id),
CONSTRAINT fk_department_second
FOREIGN KEY(department_id)
REFERENCES hospital(department_id)
);

#4-01-2023.

IN operator.

select * from hospital where name = 'Cardiology' OR name = 'Neurology'; 

SELECT * FROM hospital WHERE name IN ('Cardiology', 'Neurology');

SELECT * FROM doctor where special NOT IN('Cardiology', 'Neurology');

SELECT * FROM hospital WHERE location LIKE '1%';

#Capitalization is of great importance over here.
SELECT * FROM patient WHERE p_name LIKE 'N%';


SELECT FNAME , LNAME from doctor WHERE lname LIKE '%e';

#Fetches only one character.

#400 , 500.

SELECT * FROM consult WHERE fee LIKE '_00' ;

ALL Operator. A query within a query.

SELECT * FROM customer WHERE p_age > ALL(SELECT p_age FROM customer WHERE amount > 6500);

SELECT p_id, did , duplicate from  consult where fee > ALL(1000,70);

SELECT p_id, did, duplicate from consult where fee(70,1000);

SELECT * FROM department ORDER BY d_name ASC;

SELECT * FROM consult ORDERBY patient_id ASC , amount ASC;

SELECT * FROM consult ORDER BY patient_id ASC , consult_id DESC;

SELECT * FROM hospital ORDER BY name;

Fetch the details of patients with ascending order of name and descending order of amount.
SELECT * FROM patient ORDER BY p_name ASC, amount DESC;

INSERT ALL
 INTO hospital VALUES (1, 'Cardiology', '1 Floor', 1)
 INTO hospital VALUES (2, 'Oncology', '2 Floor', 2)
 INTO hospital VALUES (3, 'Neurology', '3 Floor', 3)
 INTO hospital VALUES (4, 'Dermatology', '4 Floor', 4)
 INTO hospital VALUES (5, 'Pediatrics', '5 Floor', 5)
SELECT * FROM DUAL;

INSERT INTO hospital (department_id, name, location, head_dr)
VALUES (2, 'Oncology', '2 Floor', 2);

INSERT INTO hospital (department_id, name, location, head_dr)
VALUES (3, 'Neurology', '3 Floor', 3);

INSERT INTO hospital (department_id, name, location, head_dr)
VALUES (4, 'Dermatology', '4 Floor', 4);

INSERT INTO hospital (department_id, name, location, head_dr)
VALUES (5, 'Pediatrics', '5 Floor', 5);


Doctor.

INSERT ALL 
INTO doctor  VALUES (1, 'John', 'Doe', 'Cardiology', 50000, '123 Main St', 123456)
INTO doctor  VALUES (2, 'Jane', 'Doe', 'Oncology', 60000, '456 Main St', 789012)
INTO doctor  VALUES (3, 'Bob', 'Smith', 'Neurology', 70000, '789 Main St', 345678)
INTO doctor  VALUES (4, 'Samantha', 'Johnson', 'Dermatology', 80000, '321 Main St', 901234)
INTO doctor  VALUES (5, 'Michael', 'Williams', 'Pediatrics', 90000, '654 Main St', 567890)
SELECT * FROM DUAL;

Patient.

INSERT ALL 
INTO patient VALUES (1, 'John Doe', 35, '123 Main Street', 5551234)
INTO patient VALUES (2, 'Jane Smith', 28, '456 Maple Avenue', 5551235)
INTO patient VALUES(3, 'Bob Johnson', 43, '789 Oak Road', 5551236)
INTO patient VALUES(4, 'Alice Williams', 45, '321 Birch Street', 5551237)
INTO patient VALUES(5, 'Mike Thompson', 38, '654 Pine Drive', 5551238)
SELECT * FROM DUAL;

INSERT INTO patient (p_id, p_name, p_age, p_address, p_phone)

INSERT INTO patient (p_id, p_name, p_age, p_address, p_phone) VALUES 

INSERT INTO patient (p_id, p_name, p_age, p_address, p_phone) VALUES 

INSERT INTO patient (p_id, p_name, p_age, p_address, p_phone) VALUES 

Consult table.


INSERT ALL
INTO consult VALUES (1, 1, 1, 'Flu', 'Treated')
INTO consult VALUES (2, 2, 1, 'Asthma', 'Treated')
INTO consult VALUES (3, 3, 2, 'Diabetes', 'Treated')
INTO consult VALUES (4, 4, 2, 'Alzhimers', 'Treated')
INTO consult VALUES (5, 5, 3, 'Cancer', 'Treated')
SELECT * FROM DUAL;


INSERT INTO consult (p_id, doc_id, department_id, disease, status)

INSERT INTO consult (p_id, doc_id, department_id, disease, status)


INSERT INTO consult (p_id, doc_id, department_id, disease, status)


INSERT INTO consult (p_id, doc_id, department_id, disease, status)




INSERT INTO hospital (department_id, name, location, head_dr)
VALUES (6, 'Orthopedics', '6 Floor', 213);

INSERT INTO hospital (department_id, name, location, head_dr)
VALUES (7, 'Urology', '7 Floor', 314);

INSERT INTO hospital (department_id, name, location, head_dr)
VALUES (8, 'Gastroenterology', '8 Floor', 415);

INSERT INTO hospital (department_id, name, location, head_dr)
VALUES (9, 'Ophthalmology', '9 Floor', 516);

INSERT INTO hospital (department_id, name, location, head_dr)
VALUES (10, 'General Surgery', '10 Floor', 617);


CREATE TABLE employee2(
eno INT NOT NULL PRIMARY KEY,
ename VARCHAR2(30),
designation VARCHAR2(40),
age INT,
dname VARCHAR2(30),
dno INT,
salary NUMBER(10,2)
);

INSERT ALL 
INTO employee2 VALUES(101, 'Hari', 'Analyst', 28, 'Sales', 2 , 50000.00)
INTO employee2 VALUES(102, 'Mahesh', 'Manager',  35, 'Sales', 2 , 25000.00)
INTO employee2 VALUES(103, 'Janvi' , 'Analyst', 30, 'Finance', 1, 80000.00)
INTO employee2 VALUES(104, 'Sumi', 'Developer' , 24, 'IT', 4 , 20000.00)
INTO employee2 VALUES(105, 'Pratik' , 'Tester', 22, 'IT', 3, 15000.00)
SELECT * FROM dual;

Give the total
SELECT sum(salary) AS Total_Salary FROM employee2;

Finds the maximum value in a column
SELECT max(salary) AS Maximum_Salary FROM employee2;

Count the number of employees who are earning more than 50,000

SELECT COUNT(*) FROM employee2 WHERE salary > 50000;

Find the minimum salary
SELECT min(salary) AS MINIMUM_SALARY FROM employee2;

Find the average salary

SELECT AVG(salary) AS AVERAGE_SALARY FROM employee2;

How many employees working in each department.
SELECT dno, count(*) FROM employee2 GROUP BY dno;

SELECT dname, count(*) FROM employee2 GROUP BY dname;

Total salary for each department.

SELECT dno ,  dname, SUM(salary) FROM employee2 GROUP BY dno,dname;

Average salary for each designation.

SELECT dno, dname, AVG(salary) FROM employee2 GROUP BY dno , dname;

Average salary for each designation.

SELECT dno, dname, avg(salary) FROM employee2 group by dno,dname;


SELECT dno, dname, min(salary) FROM employee2 group by dno,dname;

SELECT dno, dname, max(salary) FROM employee2 GROUP BY dno,dname;


Display the departments with number of employees more than one.

SELECT dno, COUNT(*) FROM employee2 GROUP BY dno HAVING COUNT(*) > 1;

Display the designation with number of employees more than 1

SELECT designation , COUNT(*) FROM employee2 GROUP BY designation HAVING COUNT(*) > 1;

ROLLUP()

SELECT dname, sum(salary) FROM employee2 GROUP BY ROLLUP(dname , eno);

Subqueries()

Write a query to find the highest salary

SELECT max(salary) FROM employee2;

fetch all the detials of the employee whose salary is the highest.

SELECT * FROM employee2 WHERE salary = (SELECT max(salary) FROM employee2);

CREATE TABLE product(
pid INT,
pd_name VARCHAR2(35),
price NUMBER(10,3),
cat int
);

INSERT ALL
INTO product VALUES(1, 'laptop'  , 250 , 10)
INTO product VALUES(2, 'ram'     ,   250,  10)
INTO product VALUES(3, 'refriger', 350, 20)
INTO product VALUES(4, 'oven'    ,     180, 20)
INTO product VALUES(5, 'mixer'   ,   70, 20)
SELECT * FROM DUAL;


Find the price of the product with product id 4

SELECT * FROM product WHERE pid = 4;

Find the details of products cost more that than product with pid 4:

SELECT * FROM product WHERE price > 180;

Single Row Subqueries

SELECT * FROM product WHERE price > (SELECT price FROM product WHERE pid = 4);

Multiple Row subqueries 

SELECT * FROM product where price in (select price from product where cat= 20);








